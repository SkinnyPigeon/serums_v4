from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa

from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding

from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.serialization import load_pem_public_key, load_der_public_key

from cryptography.fernet import Fernet

import os
import json
import base64
import binascii
from datetime import datetime

secret = os.environ.get('BCPASSWORD')

def encrypt_data(data):
    """Encrypts the data that is sent to the blockchain to update the lineage. Not used yet!!!
            
            Parameters:

                data (dict): The data which will be encrypted
            
            Returns:

                encrypted_data (str): The data that will be transmitted to the blockchain\n
                encryption (Fernet): The encryption algorithm that was used to encrypt the data
    """
    encryption = Fernet(secret)
    encrypted_data = encryption.encrypt(json.dumps(data).encode())
    return encrypted_data.decode(), encryption

def decrypt_data(data):
    """Decrypts the data that is received from the blockchain whilst updating the lineage. Not used yet!!!
            
            Parameters:

                data (str): The data which will be decrypted
            
            Returns:

                decryted_data (str): The message received from the blockchain
    """
    decryption = Fernet(secret)
    decrypted_data = decryption.decrypt(data.encode())
    return decrypted_data.decode()


def encrypt_data_with_new_key(data, public_key):
    """Encrypts the Smart Patient Health Record. This generates a new Fernet encryption algorithm which is used to encrypt the Smart Patient Health Record. The key that is generated during this process is then encrypted using a public key provided by the request body. Both the encrypted data and encrypted key are returned. 
            
            Parameters:

                data (dict): The data which will be encrypted\n
                public_key (str): The public key generated by the frontend as part of the request. This is used to encrypt the Fernet key
            
            Returns:

                encrypted_data (str): The encrypted data that is returned to the front end\n
                encryption_key (bytes): The encrypted key that is returned to the front end\n
                public_key (_PUBLIC_KEY_TYPES): The public key generated by the frontend as part of the request 
    """
    public_key = public_key.encode()
    public_key = load_pem_public_key(public_key, backend=default_backend())
    data = json.dumps(data).encode()
    encryption_key = Fernet.generate_key()
    encryption = Fernet(encryption_key)
    encrypted_data = encryption.encrypt(data).decode()

    return encrypted_data, encryption_key, public_key

def encrypt_key(key_to_encrypt, public_key):
    """Encrypts the Fernet key. The Fernet key is used to encrypt the Smart Patient Health Record. It is itself encrypted by a public key provided by the frontend as part of the request allowing it to be securely transmitted.

            Parameters:

                key_to_encrypt (str): The Fernet key that will be encrypted\n
                public_key (_PUBLIC_KEY_TYPES): The public key generated by the frontend as part of the request 

            Returns:

                key (str): The encrypted Fernet key that will be decrypted by the frontend enabling the Smart Patient Health Record to be decrypted
    
    """
    encrypted_key = public_key.encrypt(
        key_to_encrypt,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    key = binascii.b2a_base64(encrypted_key, newline=False)
    return key.decode()